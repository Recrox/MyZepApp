"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const execa_1 = require("execa");
const fs_extra_1 = __importDefault(require("fs-extra"));
const ora_1 = __importDefault(require("ora"));
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("../../tools/logger"));
function checkMainFile(root) {
    let mainFilePath = path_1.default.join(root, "main.ts");
    if (fs_extra_1.default.existsSync(mainFilePath)) {
        return "typescript";
    }
    mainFilePath = path_1.default.join(root, "main.js");
    if (fs_extra_1.default.existsSync(mainFilePath)) {
        return "javascript";
    }
    throw new Error("No main file found.");
}
function hasWebpackConfig(root) {
    const configFiles = [
        "webpack.config.js",
        "webpack.config.ts",
        "webpack.config.mjs",
        "webpack.config.cjs"
    ];
    return configFiles.some(configFile => fs_extra_1.default.existsSync(path_1.default.join(root, configFile)));
}
exports.default = (async function archive([], options) {
    const cwd = process.cwd();
    const root = options.projectRoot || cwd;
    const loader = (0, ora_1.default)();
    try {
        loader.start("Analyzing project");
        const projectName = path_1.default.basename(root);
        const projectLanguage = checkMainFile(root);
        loader.succeed();
        loader.start("Building project");
        if (projectLanguage === "typescript") {
            await (0, execa_1.execa)("npx", ["tsc", "-p", ".", "--noEmit"], {
                stdio: !logger_1.default.isVerbose() ? "pipe" : "inherit",
                cwd: root,
            });
        }
        if (hasWebpackConfig(root)) {
            await (0, execa_1.execa)("npx", ["webpack", "--output-path", "./res"], {
                stdio: !logger_1.default.isVerbose() ? "pipe" : "inherit",
                cwd: root,
            });
        }
        else {
            await (0, execa_1.execa)("npx", ["babel", "main.ts", "--out-dir", "dist", "--extensions", ".ts"], {
                stdio: !logger_1.default.isVerbose() ? "pipe" : "inherit",
                cwd: root,
            });
        }
        loader.succeed();
        logger_1.default.log(chalk_1.default.green(`Project ${projectName} built successfully.`));
    }
    catch (e) {
        loader.fail();
        if (e instanceof Error) {
            logger_1.default.error(e.message);
        }
    }
});
